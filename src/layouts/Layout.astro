---
import LayoutSwitcher from "../components/sitelayout/LayoutSwitcher.astro";
import FloatingEdit from "../components/sitelayout/FloatingEdit.astro";
const { title } = Astro.props;
import { ViewTransitions } from "astro:transitions";
import { settings } from "../components/helpers/settingsHelper";

const fontLinks = Object.values(settings.fonts)
  .map((fontObj) => {
    return atob(fontObj.htmlLink);
  })
  .join("");

const fontRules: { [key: string]: string } = {};

const fontSpecs = settings.typeOptions;
const fontSpecSets = Object.entries(fontSpecs);
fontSpecSets.forEach((pair) => {
  const fontVars = Object.entries(pair[1]);
  fontVars.forEach((fontVarPair) => {
    const keyName = pair[0] + "-" + fontVarPair[0];
    if (fontVarPair[0] === "fontFamily") {
      fontRules[keyName] = `var(--${fontVarPair[1]})`;
    } else {
      // @ts-ignore
      fontRules[keyName] = fontVarPair[1];
    }
  });
});
console.log(fontRules);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <ViewTransitions />

    <Fragment set:html={fontLinks} />

    <style
      is:global
      define:vars={{
        fontStack1: settings.fonts.font1.fontFamily,
        fontStack2: settings.fonts.font2.fontFamily,
        fontStack3: settings.fonts.font3.fontFamily,
        ...fontRules,
        // rootFontSize: settings.fonts.sizes.rootSize,
      }}
    >
      h1 {
        font-family: var(--h1-fontFamily);
        font-size: var(--h1-fontSize);
        margin-top: var(--h1-marginTop);
        margin-bottom: var(--h1-marginBottom);
        color: var(--font-color-override, --h1-color);
        line-height: var(--h1-lineHeight);
      }
      h2 {
        font-family: var(--h2-fontFamily);
        font-size: var(--h2-fontSize);
        margin-top: var(--h2-marginTop);
        margin-bottom: var(--h2-marginBottom);
        color: var(--font-color-override, --h2-color);
        line-height: var(--h2-lineHeight);
      }
      h3 {
        font-family: var(--h3-fontFamily);
        font-size: var(--h3-fontSize);
        margin-top: var(--h3-marginTop);
        margin-bottom: var(--h3-marginBottom);
        color: var(--font-color-override, --h3-color);
        line-height: var(--h3-lineHeight);
      }
      h4 {
        font-family: var(--h4-fontFamily);
        font-size: var(--h4-fontSize);
        margin-top: var(--h4-marginTop);
        margin-bottom: var(--h4-marginBottom);
        color: var(--font-color-override, --h4-color);
        line-height: var(--h4-lineHeight);
      }
      h5 {
        font-family: var(--h5-fontFamily);
        font-size: var(--h5-fontSize);
        margin-top: var(--h5-marginTop);
        margin-bottom: var(--h5-marginBottom);
        color: var(--font-color-override, --h5-color);
        line-height: var(--h5-lineHeight);
      }

      p {
        font-family: var(--p-fontFamily);
        font-size: var(--p-fontSize);
        margin-top: var(--p-marginTop);
        margin-bottom: var(--p-marginBottom);
        color: var(--font-color-override, --p-color);
        line-height: var(--p-lineHeight);
      }
      *:first-child {
        margin-top: 0;
      }
      *:last-child {
        margin-bottom: 0;
      }
    </style>
    <style
      define:vars={{
        maxPageContentWidth: settings.pageArea.pageWidth,
        standardPadding: settings.pageArea.padding.horizontal,
        maxImageWidth: settings.pageArea.images.displayWidth,
      }}
      is:global
    >
      html {
        margin: auto;
        padding: 0;
        line-height: 1.25;
        font-size: 1.25rem;
        font-family: var(--p-fontFamily);
      }

      img {
        height: auto;
        width: 100%;
      }

      * {
        padding: 0;
        margin: 0;

        box-sizing: border-box;
      }
      main {
        align-items: center;
        position: relative;
      }
      main > * {
        display: block;
        width: 100%;
        margin-left: auto;
        margin-right: auto;
        padding: 0 var(--standardPadding);
        max-width: var(--maxPageContentWidth);
        overflow-wrap: break-word;
      }
      .md-default-image {
        max-width: var(--maxImageWidth);
      }
    </style>
  </head>

  <LayoutSwitcher>
    <FloatingEdit />
    <slot />
  </LayoutSwitcher>

  <script>
    import AOS from "aos";
    import "aos/dist/aos.css"; // You can also use <link> for styles
    // ..

    document.addEventListener("astro:page-load", () => {
      document.querySelectorAll("main > *").forEach((item) => {
        item.setAttribute("data-aos", "fade-in");
        AOS.init({ offset: 0, delay: 50 });
      });
    });

    AOS.init();
  </script>
</html>
