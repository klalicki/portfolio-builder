---
import type { string } from "astro/zod";
import menuItems from "../../helpers/menuItems";

import { settings } from "../../helpers/settingsHelper";
import { fontRules } from "../../helpers/fontRuleBuilder";

const menuItemCount = menuItems.length;
const fontSettings = fontRules(settings.menu.typography);
---

<style
is:global
  define:vars={{
    menuBackgroundColor: settings.menu.colors.backgroundColor,
    menuDropdownColor: settings.menu.colors.dropdownColor,
    mainHoverColor: settings.menu.colors.menuHoverColor,
    dropdownHoverColor: settings.menu.colors.dropdownHoverColor,
    ...fontSettings,
  }}
>
  /* type stuff */
  .top-bar-text {
    font-family: var(--menuText-fontFamily);
    font-size: var(--menuText-fontSize);
    font-weight: var(--menuText-fontWeight);
    font-style: var(--menuText-fontStyle);
    margin-top: var(--menuText-marginTop);
    margin-bottom: var(--menuText-marginBottom);
    color: var(--menuText-color);
    line-height: var(--menuText-lineHeight);
  }
  .menu-item {
    font-family: var(--menuMain-fontFamily);
    font-size: var(--menuMain-fontSize);
    font-weight: var(--menuMain-fontWeight);
    font-style: var(--menuMain-fontStyle);
    margin-top: var(--menuMain-marginTop);
    margin-bottom: var(--menuMain-marginBottom);
    color: var(--menuMain-color);
    line-height: var(--menuMain-lineHeight);
  }
  .submenu-item {
    font-family: var(--menuSub-fontFamily);
    font-size: var(--menuSub-fontSize);
    font-weight: var(--menuSub-fontWeight);
    font-style: var(--menuSub-fontStyle);
    margin-top: var(--menuSub-marginTop);
    margin-bottom: var(--menuSub-marginBottom);
    color: var(--menuSub-color);
    line-height: var(--menuSub-lineHeight);
  }

  .menu-item,
  .submenu-item {
    text-decoration: none;
  }
  /* end type stuff */

  .top-bar-text-wrapper {
    flex-grow: 1;
    flex-basis: content;
    flex-shrink: 10;
    display: flex;
    align-items: center;
    padding: 0 0.5rem;
  }

  .menu-main {
    /* position: fixed;
    left: 0px;
    right: 0px;
    top: 0px; */

    display: flex;
    padding: 0;
    justify-content: flex-end;
  }
  .menu-main-group {
    position: fixed;
    top: var(--menuHeight);
    left: 0px;
    right: 0px;
    bottom:0;
    display: flex;
    flex-direction: column;
    background-color: var(--menuDropdownColor);
    overflow: auto;
    z-index: -10;
    transform: none;
    transition: all 0.3s;
  }
  

  .menu-submenu {
    overflow: hidden;
    z-index: -100;
  }
  .menu-submenu-item-wrapper {
    display: flex;
    flex-direction: column;
    padding-left: 1rem;
    font-size: 0.75rem;
    gap: 0.25rem;
  }
  .menu-submenu a {
    padding: 0.5rem 0;
  }
  .menu-dropdown-button {
    display: none;
  }
  #menu-toggle {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    border: none;
    background: transparent;
    width:calc(var(--menuHeight));
        align-self: stretch;
        min-height: var(--menuHeight); 

    /* aspect-ratio: 1/1; */
  }
  #menu-toggle span{
    font-size:calc(var(--menuHeight) * .75);

  }
  .menu-mobile-hidden {
    transform: translateY(-50px);
    overflow: hidden;
    opacity: 0;
    pointer-events: none;
    transition: all 0.3s;
  }

  .menu-item:hover,
  .submenu-item:hover,
  .menu-item:focus,
  .submenu-item:focus {
    background-color: var(--dropdownHoverColor);
  }

    #menu-toggle:hover
{
  background-color: var(--mainHoverColor);

}


.menu-hide-bar .menu-main-group{
  pointer-events: all;
}
.menu-hide-bar .menu-mobile-hidden{
  pointer-events: none;
}
  .menu-hide-bar #menu-toggle{
    pointer-events: all;
  }
  .menu-hide-bar .menu-main-group{
    position: fixed;
    top:0;
  }
 
</style>
{settings.menu.position.value.hideBar&& (<style>
  header{
    pointer-events: none;
  }

  </style>)}
{!settings.menu.position.value.alwaysDropdown && <style>
   @media screen and (min-width: 768px) {
    .menu-mobile-hidden {
      display: flex;
      opacity: 1;
      pointer-events: all;
      transform: none;
    }
    #menu-toggle {
      display: none;
    }
    .menu-main button {
      display: inline;
    }
    .menu-main-group {
      display: flex;
      align-items: stretch;
      justify-content: flex-end;
      flex-basis: content;
      flex-shrink: 0;
      flex-wrap: wrap;
      flex-direction: row;
      gap: 1rem;
      overflow: visible;
      position: static;
      background: none;
    }
    .menu-main {
      flex-grow: 1;
      justify-content: flex-end;
      position: relative;
      z-index: 100;
    }

    .menu-submenu {
      position: absolute;
      overflow: hidden;
      top: 100%;
      transition: all 0.3s;
      gap: 1rem;
    }
    .menu-submenu-item-wrapper {
      display: inline-flex;
      flex-direction: column;
      padding: 0.5rem;
      transition: all 0.3s;
      background-color: var(--menuDropdownColor);
    }
    .menu-submenu-item-wrapper a {
      width: max-content;
    }
    .dropdown-group {
      position: relative;
      display: flex;
      /* border: 1px solid red; */
    }
    .dropdown-button-wrapper {
      /* border: 1px solid red; */
      display: flex;
    }
    .dropdown-button-wrapper a {
      align-self: center;
      padding: 3px;
    }
    .menu-dropdown-button {
      min-width: 30px;
      border: none;
      background-color: transparent;
    }
    .dropdown-group-right .menu-submenu {
      right: 0;
    }
    .submenu-hidden {
      height: 0px;
      opacity: 0;
      pointer-events: none;
      transition: all 0.3s;
    }
    .submenu-hidden .menu-submenu-item-wrapper {
      transform: translateY(-50px);
      height: 0px;
      opacity: 0;
      pointer-events: none;
      transition: all 0.3s;
    }

    .menu-item:hover,
    .menu-item:focus {
      background-color: var(--mainHoverColor);
    }
  }</style>}

<nav class:list={["menu-main",settings.menu.position.value.hideBar&&"menu-hide-bar"]}>
  {
    settings.menu.position.value.menuBarText && (
      <div class="top-bar-text-wrapper">
        <p class="top-bar-text">{settings.menu.position.value.menuBarText}</p>
      </div>
    )
  }

  <button id="menu-toggle"
    ><span class="material-icons-outlined">menu</span></button
  >

  <div class="menu-main-group menu-mobile-hidden">
    {
      menuItems.map((item, index) => {
        const isRightSide = (index + 1) * 2 >= menuItemCount;
        if (item.subItems.length > 0) {
          return (
            <>
              <div
                class:list={[
                  "dropdown-group",
                  isRightSide && "dropdown-group-right",
                ]}
              >
                <div class="dropdown-button-wrapper">
                  <a
                    class="menu-item"
                    href={item.url}
                    data-menu-id={item.groupID}
                  >
                    {item.title}
                  </a>
                  <button
                    class="menu-dropdown-button"
                    data-menu-id={item.groupID}
                    aria-controls={item.groupID}
                  >
                    <span class="material-icons-outlined">arrow_drop_down</span>
                  </button>
                </div>

                <div class="menu-submenu submenu-hidden" id={item.groupID}>
                  <div class="menu-submenu-item-wrapper">
                    {item.subItems.map(
                      (subItem: { url: string; title: string }) => {
                        return (
                          <a class="submenu-item" href={subItem.url}>
                            {subItem.title}
                          </a>
                        );
                      }
                    )}
                  </div>
                </div>
              </div>
            </>
          );
        } else {
          return <a href={item.url}>{item.title}</a>;
        }
      })
    }
  </div>
</nav>
