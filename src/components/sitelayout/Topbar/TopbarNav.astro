---
import menuItems from "../../helpers/menuItems";

import settings from "../../helpers/settingsHelper";
const sidebarWidth = settings.sidebar.sidebarWidth;
---

<style>
  /*  */
  .menu-main {
  }
  .menu-main-group {
    position: fixed;
    top: 45px;
    left: 0px;
    right: 0px;
    display: flex;
    flex-direction: column;
    background-color: lightblue;
  }
  .menu-submenu {
    display: flex;
    flex-direction: column;
    padding-left: 1rem;
    font-size: 0.75rem;
    gap: 0.25rem;
  }
  .menu-main button {
    display: none;
  }

  @media screen and (min-width: 600px) {
    .menu-main button {
      display: inline;
    }
    .menu-main-group {
      display: flex;
      flex-direction: row;
      gap: 1rem;
      position: static;
    }
    .menu-submenu {
      position: absolute;
      top: 45px;
      display: flex;
      flex-direction: column;
      gap: 1rem;
      background-color: lightblue;
      padding: 1rem;
    }
    .submenu-hidden {
      display: none;
    }
  }
</style>
<style is:global define:vars={{ sidebarWidth: sidebarWidth }}>
  .header-for-sidebar {
    /* width:var(--sidebarWidth); */
    /* background-color: yellow; */
  }
  .body-for-sidebar {
    display: flex;
  }
</style>
<script>
  const buttons = document.querySelectorAll(".menu-dropdown");
  // alert(buttons.length);
  buttons.forEach((item) => {
    item.addEventListener("click", () => {
      const menuID = item.getAttribute("data-menu-id");
      const isInitiallyHidden = document
        .getElementById(menuID)
        ?.classList.contains("submenu-hidden");
      document.querySelectorAll(".menu-submenu").forEach((submenu) => {
        submenu.classList.toggle("submenu-hidden", true);
      });
      document
        .getElementById(menuID)
        ?.classList.toggle("submenu-hidden", !isInitiallyHidden);
    });
  });
</script>
<nav class="menu-main">
  <div class="menu-main-group">
    {
      menuItems.map((item) => {
        if (item.subItems.length > 0) {
          return (
            <>
              <div class="dropdown-group">
                <div>
                  <a href={item.url}>{item.title}</a>
                  <button
                    class="menu-dropdown"
                    data-menu-id={item.groupID}
                    aria-controls={item.groupID}
                  >
                    E
                  </button>
                </div>

                <div class="menu-submenu submenu-hidden" id={item.groupID}>
                  {item.subItems.map((subItem) => {
                    return <a href={subItem.url}>{subItem.title}</a>;
                  })}
                </div>
              </div>
            </>
          );
        } else {
          return <a href={item.url}>{item.title}</a>;
        }
      })
    }
  </div>
</nav>

<!-- 
  code to render submenu- add once i figure out an accessible dropdown
 
 -->
