---
const { props } = Astro;
const imagePath = "../../assets/images" + props.image;
import Image from "astro/components/Image.astro";
import { getImage } from "astro:assets";
import { settings } from "../helpers/settingsHelper";
const pageWidth = settings.pageArea.pageWidth;
const sidePadding = settings.pageArea.padding.horizontal;
import OptimizedImage from "./OptimizedImage.astro";

const images = import.meta.glob<{ default: ImageMetadata }>(
  "./../../assets/images/**/*.{jpeg,jpg,png,gif}"
);
// console.log(images);
if (!images[imagePath])
  throw new Error(
    `"${props.image}" does not exist in glob: "src/assets/*.{jpeg,jpg,png,gif}"`
  );

const fancyImage = await getImage({ src: images[imagePath](), width: 1200 });
// console.log(fancyImage);
const parallaxSelector = {
  backgroundAttachment: "scroll",
};
if (props.parallax) {
  parallaxSelector.backgroundAttachment = "fixed";
}
---

<script>
  const elements = document.querySelectorAll(".hero-image-parallax");
  window.addEventListener("scroll", () => {
    const scrollY = window.scrollY;
    elements.forEach((element) => {
      const offset = (scrollY - element.scrollTop) * 0.5;
      const clampedOffset = Math.min(element.clientHeight, offset);
      // @ts-ignore
      element.style.setProperty("--parallaxOffset", `${-clampedOffset}px`);
    });
  });
</script>

<style
  define:vars={{
    heroWidth: props.width,
    heroHeight: props.height,
    pageWidth,
    sidePadding,
    panelWidth: props.showPanel.value.panelWidth,
    panelColor: props.showPanel.value.panelColor,
    textColor: props.showPanel.value.textColor,
  }}
>
  .hero-section-wrapper {
    max-width: var(--heroWidth);
    height: var(--heroHeight);
    position: relative;
    display: flex;
    flex-direction: row;
    justify-content: center;
    overflow: hidden;
  }
  .hero-section-image {
    width: 100%;
    height: calc(var(--heroHeight) * 1.5);
    position: absolute;

    /* padding: 2rem; */
    object-fit: cover;
    transform: translateY(var(--parallaxOffset));
    z-index: -1;
  }
  .hero-section-content-panel {
    background-color: var(--panelColor);
    color: var(--textColor);

    /* position: relative; */
    padding: 1rem;
    max-width: var(--panelWidth);
  }
  /* .hero-section-content-panel * {
    color: var(--textColor);
  } */
  .hero-section-content-wrapper {
    width: 100%;
    max-width: var(--pageWidth);
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    align-items: center;
    position: relative;
  }
</style>
<div class:list={["hero-section-wrapper", props.customClass]}>
  {
    props.showPanel.discriminant && (
      <div class="hero-section-content-wrapper">
        <div class="hero-section-content-panel">
          <slot />
        </div>
      </div>
    )
  }

  <OptimizedImage
    class:list={["hero-section-image", props.parallax && "hero-image-parallax"]}
    src={imagePath}
    alt=""
  />
</div>
